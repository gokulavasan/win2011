Name : Josh Lang and Gokul Gunasekaran

We created a STMTreap.java in order to increase the throughput (operations/sec) on the Treap data structure using Software Transactional Memory (STM). 

The following changes were done to the original algorithm in order to make it work better in a STM model.

i. Close-loop nested transacations - 'contains' : 
The contains function call was converted into a support function along with a recursive call. Both of the functions are atomic transactions. In the case when there is a conflict, the recursive call can role back instead of the entire 'contains' call. This improves performance during conflicting cases.

ii. Reducing writes to nodes :
The add/remove implementations were modified to write back to the nodes only when they are different from the existing values. This reduces unnecessary ?

iii. Atomic Long variable - 'randStat' : The updates to the random state is done using AtomicLong class and getState/compareAndSet are used during modifications.

The above changes increased the throughput of the DeuceSTM implementation for LSA and TL2 algorithms on the STMTreap structure compared to the single threaded performance of CoarseLock implementation.